#include <Wire.h>
#include <SPI.h>
#include <IRremote.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>

#define IR_PIN 15

// Nokia 5110 Display Pins
#define RST 14
#define CE 5
#define DC 19
#define DIN 23
#define CLK 18

#define LCD_C     LOW
#define LCD_D     HIGH

#define LCD_X     84
#define LCD_Y     48

char bmp1[] = { 
  0x00, 0x00, 0x00, 0x00, 0x80, 0x20, 0x10, 0x08, 0x04, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x81, 0x41, 0x42, 0x42, 0x44, 0x88, 0x10, 0x20, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xc0, 0x78, 0x86, 0x01, 0x70, 0x18, 0x04, 0x02, 0x02, 0x04, 0x38, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x30, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0xfc, 0x02, 0x02, 0xfc, 0x00, 0x01, 0xfe, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x78, 0x84, 0x02, 0x00, 0xfc, 0x02, 0x01, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1e, 0x0d, 0x07, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf8, 0x1f, 0x7e, 0x7e, 0xfc, 0xe0, 0xe0, 0xe0, 0xe0, 0xe1, 0xe0, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x04, 0x05, 0x05, 0x04, 0x02, 0x00, 0x01, 0xc8, 0xf4, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x02, 0x04, 0x00, 0x01, 0x02, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0xb8, 0x6f, 0x15, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x10, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x04, 0x18, 0x7f, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x80, 0xe0, 0xac, 0x56, 0x2b, 0x15, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x82, 0x42, 0x84, 0x88, 0x08, 0x10, 0x20, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x18, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1c, 0x0a, 0x05, 0x0b, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x14, 0x0b, 0x15, 0x2b, 0x56, 0x2e, 0x5e, 0x3c, 0x79, 0x70, 0x70, 0x62, 0x64, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x24, 0x1c, 0x08, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


void LcdClear(void)
{
  for (int index = 0; index < LCD_X * LCD_Y / 8; index++)
  {
    LcdWrite(LCD_D, 0x00);
  }
}
void LcdInitialise(void)
{
  pinMode(CE, OUTPUT);
  pinMode(RST, OUTPUT);
  pinMode(DC, OUTPUT);
  pinMode(DIN, OUTPUT);
  pinMode(CLK, OUTPUT);
  digitalWrite(RST, LOW);
  digitalWrite(RST, HIGH);
  LcdWrite(LCD_C, 0x21 );  // LCD Extended Commands.
  LcdWrite(LCD_C, 0xB1 );  // Set LCD Vop (Contrast). 
  LcdWrite(LCD_C, 0x04 );  // Set Temp coefficent. //0x04
  LcdWrite(LCD_C, 0x14 );  // LCD bias mode 1:48. //0x13
  LcdWrite(LCD_C, 0x0C );  // LCD in normal mode.
  LcdWrite(LCD_C, 0x20 );
  LcdWrite(LCD_C, 0x0C );
}

void gotoXY(int x, int y)
{
  LcdWrite( 0, 0x80 | x);  // Column.
  LcdWrite( 0, 0x40 | y);  // Row. 

}
void LcdWrite(byte dc, byte data)
{
  digitalWrite(DC, dc);
  digitalWrite(CE, LOW);
  shiftOut(DIN, CLK, MSBFIRST, data);
  digitalWrite(CE, HIGH);
}

void LcdBitmap(char my_array[]){
  for (int index = 0 ; index < (LCD_X * LCD_Y / 8) ; index++)
    LcdWrite(LCD_D, my_array[index]);
}






Adafruit_PCD8544 display = Adafruit_PCD8544(CLK, DIN, DC, CE, RST);

void setup() {

 LcdInitialise();
  LcdClear();
  gotoXY(0,0);









    Serial.begin(115200);
    IrReceiver.begin(IR_PIN, ENABLE_LED_FEEDBACK); // Initialize IR receiver
    
    display.begin();
    display.setContrast(50);
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(BLACK);
    display.setCursor(0, 0);
    display.print("Waiting.......");
    display.display();
    LcdBitmap(bmp1);
  
}

void loop() {
    if (IrReceiver.decode()) {
      LcdClear();
        uint32_t value = IrReceiver.decodedIRData.decodedRawData;
        Serial.print("Received: 0x");
        Serial.println(value, HEX);

        display.clearDisplay();
        display.setCursor(0, 0);
        display.print("Signal Recvd");
        display.setCursor(0, 10);
        display.print("HEX:");
        display.setCursor(30, 10);
        display.print(value, HEX);

        display.setCursor(0, 20);
        display.print("Type:");
        display.setCursor(30, 20);
        display.print(getProtocolName(IrReceiver.decodedIRData.protocol));

        display.display();

        IrReceiver.resume(); // Receive next signal
    } else {
        Serial.println("Waiting for IR signal...");
    }
    delay(500);
}

String getProtocolName(decode_type_t protocol) {
    switch (protocol) {
        case NEC: return "NEC";
        case SONY: return "SONY";
        case RC5: return "RC5";
        case RC6: return "RC6";
        case JVC: return "JVC";
        case PANASONIC: return "PANASONIC";
        case LG: return "LG";
        case SAMSUNG: return "SAMSUNG";
        case WHYNTER: return "WHYNTER";
        case DENON: return "DENON";
        case UNKNOWN: return "UNKNOWN";
        default: return "OTHER";
    }
}
