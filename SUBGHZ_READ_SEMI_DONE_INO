#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>
#include <RCSwitch.h>

#define RST 14
#define CE 5
#define DC 19
#define DIN 23
#define CLK 18
// MOSI = 23, SCK = 18 (hardware SPI)

// Define 433MHz receiver pin
#define RX_PIN 15

#define LCD_C     LOW
#define LCD_D     HIGH

#define LCD_X     84
#define LCD_Y     48
char bmp1[] = { 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x60, 0x20, 0x50, 0x30, 0x58, 0xb8, 0x68, 0xa8, 0x48, 0x88, 0x08, 0x08, 0x08, 0x08, 0x10, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x30, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xc0, 0x30, 0x0c, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0xc0, 0xc1, 0xc0, 0x85, 0x0a, 0x57, 0xae, 0x5c, 0xf0, 0x40, 0x40, 0x20, 0x20, 0x20, 0x10, 0x90, 0x10, 0x11, 0x12, 0x9c, 0x10, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x38, 0x07, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x04, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x10, 0xf0, 0x00, 0x00, 
  0x00, 0x80, 0xfc, 0x03, 0x00, 0x00, 0x3c, 0xc2, 0x82, 0x82, 0xbe, 0xc1, 0x80, 0x1e, 0x3f, 0x79, 0x79, 0xff, 0xff, 0x7f, 0x03, 0x7f, 0x81, 0x80, 0x40, 0xa0, 0xc1, 0x6e, 0x50, 0x20, 0x30, 0x2f, 0x10, 0x18, 0x10, 0x1f, 0x10, 0x1f, 0x10, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0x10, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0x10, 0x10, 0xf0, 0xd0, 0x78, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x34, 0x2c, 0x34, 0x3c, 0xff, 0x1c, 0xff, 0x1c, 0x1e, 0x1a, 0x1e, 0x0a, 0xff, 0x0e, 0xff, 0x0e, 0x0e, 
  0x56, 0xab, 0xff, 0x00, 0x00, 0x00, 0x05, 0x0a, 0x05, 0x0a, 0x0d, 0x02, 0x01, 0x01, 0x01, 0x41, 0x81, 0x01, 0x02, 0x06, 0x02, 0x82, 0x83, 0x81, 0x41, 0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x88, 0xc8, 0x30, 0x0f, 0x80, 0x70, 0x8c, 0xf3, 0xfc, 0xff, 0xfe, 0xf8, 0xf0, 0x70, 0x10, 0x10, 0x10, 0x10, 0x0f, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x30, 0x40, 0x80, 0x01, 0x7e, 0x80, 0x00, 0x00, 0x07, 0x08, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 
  0x7d, 0xae, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0xa0, 0x50, 0xa1, 0x51, 0xa1, 0x51, 0xa0, 0x70, 0xe0, 0xf0, 0xe8, 0xf0, 0xf8, 0xf0, 0xf8, 0xf0, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0x7e, 0x26, 0x13, 0x09, 0x04, 0x02, 0x02, 0x07, 0x1c, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x55, 0xaa, 0x50, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x15, 0x1a, 0x15, 0x1a, 0x15, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x05, 0x06, 0x05, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0xbc, 0xd7, 0xab, 0xd5, 0x6b, 0x35, 0x1a, 0x0d, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


void LcdClear(void)
{
  for (int index = 0; index < LCD_X * LCD_Y / 8; index++)
  {
    LcdWrite(LCD_D, 0x00);
  }
}
void LcdInitialise(void)
{
  pinMode(CE, OUTPUT);
  pinMode(RST, OUTPUT);
  pinMode(DC, OUTPUT);
  pinMode(DIN, OUTPUT);
  pinMode(CLK, OUTPUT);
  digitalWrite(RST, LOW);
  digitalWrite(RST, HIGH);
  LcdWrite(LCD_C, 0x21 );  // LCD Extended Commands.
  LcdWrite(LCD_C, 0xB1 );  // Set LCD Vop (Contrast). 
  LcdWrite(LCD_C, 0x04 );  // Set Temp coefficent. //0x04
  LcdWrite(LCD_C, 0x14 );  // LCD bias mode 1:48. //0x13
  LcdWrite(LCD_C, 0x0C );  // LCD in normal mode.
  LcdWrite(LCD_C, 0x20 );
  LcdWrite(LCD_C, 0x0C );
}

void gotoXY(int x, int y)
{
  LcdWrite( 0, 0x80 | x);  // Column.
  LcdWrite( 0, 0x40 | y);  // Row. 

}
void LcdWrite(byte dc, byte data)
{
  digitalWrite(DC, dc);
  digitalWrite(CE, LOW);
  shiftOut(DIN, CLK, MSBFIRST, data);
  digitalWrite(CE, HIGH);
}

void LcdBitmap(char my_array[]){
  for (int index = 0 ; index < (LCD_X * LCD_Y / 8) ; index++)
    LcdWrite(LCD_D, my_array[index]);
}


// Initialize display with hardware SPI
Adafruit_PCD8544 display = Adafruit_PCD8544(CLK, DIN, DC, CE, RST);

// Initialize RC Switch
RCSwitch mySwitch = RCSwitch();

void setup() {
  Serial.begin(115200);
  
 LcdInitialise();
  LcdClear();
  gotoXY(0,0);

  
  // Initialize display
  display.begin();
  display.setContrast(60);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(BLACK);
  display.setCursor(0,0);
  display.println("Initializing...");
  display.display();
   
  delay(2000);

  // Initialize 433MHz receiver
  mySwitch.enableReceive(digitalPinToInterrupt(RX_PIN));
  
  display.clearDisplay();
  display.setCursor(0,0);
  display.println("Waiting for");
  display.println("signals...");
  display.display();
  LcdBitmap(bmp1);
}

void loop() {
  if (mySwitch.available()) {
    // Get received data
    unsigned long value = mySwitch.getReceivedValue();
    unsigned int bitLength = mySwitch.getReceivedBitlength();
    unsigned int bytes = (bitLength + 7) / 8; // Calculate bytes from bits

    // Clear display and show received data
    display.clearDisplay();
    display.setCursor(0,0);
    display.print("Value: ");
    display.println(value);
    display.print("Bytes: ");
    display.println(bytes);
    display.print("Bits: ");
    display.println(bitLength);
    display.display();

    // Also send to serial monitor for debugging
    Serial.print("Received Value: ");
    Serial.print(value);
    Serial.print(" | Bits: ");
    Serial.print(bitLength);
    Serial.print(" | Bytes: ");
    Serial.println(bytes);

    // Reset receiver
    mySwitch.resetAvailable();
  }
}
